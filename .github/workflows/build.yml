name: Build and Release

on:
  workflow_dispatch:

jobs:
  build_drtk_gui:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0'

      - name: Restore dependencies
        run: cd .\drtk-gui\ && dotnet restore

      - name: Build and publish project
        run: cd .\drtk-gui\ && dotnet publish -c Release -r win-x64 --self-contained

      - name: Archive build artifacts
        run: |
          cd drtk-gui/drtk-gui/bin/Release/net8.0/win-x64/publish/
          Compress-Archive -Path * -DestinationPath drtk-gui-frontend.zip

      - name: Upload GUI zip as artifact
        uses: actions/upload-artifact@v4
        with:
          name: drtk-gui
          path: drtk-gui/drtk-gui/bin/Release/net8.0/win-x64/publish/drtk-gui-frontend.zip

  build_drtk_cli:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Extract current version from pom.xml
        id: get_version
        run: |
          cd drtk-cli
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Current version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Increment version
        id: increment_version
        run: |
          VERSION="${{ env.VERSION }}"
          MAJOR=$(echo $VERSION | cut -d'.' -f1)
          MINOR=$(echo $VERSION | cut -d'.' -f2)
          REVISION=$(echo $VERSION | cut -d'.' -f3 | cut -d'-' -f1)
          NEW_REVISION=$((REVISION + 1))
          TIMESTAMP=$(date +%Y%m%d%H%M)
          NEW_VERSION="$MAJOR.$MINOR.$NEW_REVISION-$TIMESTAMP"
          echo "New version: $NEW_VERSION"
          cd drtk-cli && mvn versions:set -DnewVersion=$NEW_VERSION
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Commit version changes to pom.xml
        run: |
          cd drtk-cli
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add pom.xml
          git commit -m "Update version to ${{ env.NEW_VERSION }}"
          git push

      - name: Build with Maven
        run: cd drtk-cli && mvn clean package

      - name: Upload CLI JAR as artifact
        uses: actions/upload-artifact@v4
        with:
          name: drtk-cli
          path: drtk-cli/target/drtk-cli-${{ env.NEW_VERSION }}.jar

      # Publish to Github Packages
      - name: Publish JAR to GitHub Packages
        run: cd drtk-cli && mvn deploy -s settings.xml
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create_release:
    needs: [build_drtk_gui, build_drtk_cli]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get current version
        id: get_version
        run: |
          VERSION=$(cat version.txt)
          echo "Current version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Increment version
        id: increment_version
        run: |
          VERSION="${{ env.VERSION }}"
          MAJOR=$(echo $VERSION | cut -d'.' -f1)
          MINOR=$(echo $VERSION | cut -d'.' -f2)
          REVISION=$(echo $VERSION | cut -d'.' -f3)
          NEW_REVISION=$((REVISION + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_REVISION"
          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Update version.txt
        run: |
          echo ${{ env.NEW_VERSION }} > version.txt

      - name: Fetch changes
        run: |
          git fetch
          git pull

      - name: Commit new version
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add version.txt
          git commit -m "Update version to ${{ env.NEW_VERSION }}"
          git push

      - name: Tag repository
        run: |
          git tag -a ${{ env.NEW_VERSION }} -m "Release ${{ env.NEW_VERSION }}"
          git push origin ${{ env.NEW_VERSION }}

      - name: Download drtk-gui artifact
        uses: actions/download-artifact@v4
        with:
          name: drtk-gui
          path: ./artifacts/drtk-gui

      - name: Download drtk-cli artifact
        uses: actions/download-artifact@v4
        with:
          name: drtk-cli
          path: ./artifacts/drtk-cli

      - name: Create GitHub release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ env.NEW_VERSION }} \
          --title "Release ${{ env.NEW_VERSION }}" \
          --notes "Automated release for version ${{ env.NEW_VERSION }}" \
          --target main

      - name: Upload frontend .zip artifact to release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release upload ${{ env.NEW_VERSION }} \
          "./artifacts/drtk-gui/*.zip" \
          --clobber

      - name: Upload backend .jar artifact to release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release upload ${{ env.NEW_VERSION }} \
          "./artifacts/drtk-cli/*.jar" \
          --clobber
